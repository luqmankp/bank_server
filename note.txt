server Creation
----------------

-1- create package.json file  - npm init
-2- install express framework - npm i express


server side technology   - node   [-feature of node is it resolves multiple request at a time]

api
----
http request

header             body
secret data        data-json


type
------
GET     -read
POST    -create
PUT     -complete updation
PATCH   -partial updation
DELETE  -remove

server response status code
----------------------------

100    -information (like alert)
200    -success
300    -redirection
400    -client side error
500    -server side error


server creation steps
----------------------
1- import express
2- create app using express
3- port number seting   3000 
4- resolve http requests


Nodemon
--------
if we run server using node, recombilation not work
so we use another server Nodemon.

installing nodemon localy
-npm i nodemon(local installation)   -npm i -g nodemon(global installation)

to run nodemon 
-npx nodemon ./file_path_name


.use(express.json())        -to convert all requests datas from json to js
.json(data)                 -convert(js to json) and send tha data as response
.status(statusCode)         -change the response status code as statusCode


Token in server
===============
JWT TOKEN - (json web Token)

to install Token      - npm i jsonwebtoken

-jsonwebtoken    - is a library
-sign()          - method used to generate jwt token
-verify()        - used to verify json web token


token verification
-------------------
 middlewares          -token verification can do using middlewares ,
                       middlewares have the capacity to control server requests.
-middleware is a funtion with three arguments:

         -request
         -response
         -next

 - two type of middleware:

    1.Application Specific middleware   -work before all requestsin server
    2.Router Specific middleware        -can apply to Specific request in server

how to solve runtime errors in js
----------------------------------
try except 

try   - error causing code 
catch - error solve



 Mongo   DB  -database
 ======================

 installation- mongodb server


 shell commands
 ---------------
CRUD 


-                         show dbs                                   - to see databases
-                   use (database_name)                              - to open a database
-                    show collections                                - to see collections inside db
-               db.(collection_name).find()                          - to read all data in collection
-          db.(collection_name).findOne(acno:1000)                   - to read single data
- db.(collection_name).insertOne({"acno":1001,"name":"amal",....})   - create new data
-       db.(collection_name).find({balace:{gt:4000}})                - find using a condition(using query selection operators)
-      db.(collection_name).deleteOne({"uname":"anu"})               - used to delete (and an output 'delete count' will be obtain)
- db.(collection_name).updateOne({uname:anu},{$set:{uname:Anu A}})   - update data


register           - insertOne
login              - findOne
deposit            - updateOne
withdraw           - updateOne
transactionhistory - findOne
delete             - deleteOne
 

 server Database integration
============================

database  -27017
server    -3000

mongoose - is a library used to server mdb integration

installation - npm i mongoose


steps
------
1.import mongoose
2.state a connection string to integrate
3.define a model for our collenction (schema creation)



FrontEnd server integration
============================
FrontEnd - 4200
cors  - cross origin resource sharing - library used to FrontEnd server integration (4200 - 3000)

steps

 1-import cors
 2-connection string